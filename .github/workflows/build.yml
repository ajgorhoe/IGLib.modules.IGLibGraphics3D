name: Build and Test MainRepo1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering
  
env:
  # Main repository directory:
  REPODIR: IGLibGraphics3D   # Placeholder: ${{ env.REPODIR }}
  # Whether failed tests are idnored (should normally be false):
  IGNORE_TEST_ERRORS: true   # ${{ env.IGNORE_TEST_ERRORS }}

jobs:

  build-and-test:
    runs-on: windows-latest  # use Windows for .NET Framework support
    # runs-on: ubuntu-latest # runs on GitHub-hosted Ubuntu
    strategy:
      matrix:
        dotnet-version: [ '10.0' ]

    steps:
      # CHECKOUT Main Repository
      - name: Clone Main Repository
        uses: actions/checkout@v4
        with:
          repository: ajgorhoe/IGLib.modules.${{ env.REPODIR }}
          path: ${{ env.REPODIR }}
          ref: main
          # Important: set fetch-depth 0 to avoid shallow clones (needed
          #   for GitVersion):
          fetch-depth: 0
          # Temporary token created automatically for the main repo (owner of the workflow) 
          token: ${{ secrets.GITHUB_TOKEN  }}

      # CLONE IGLibCore
      - name: Clone IGLibCore
        shell: pwsh
        # Important: set --depth 0 to avoid shallow clones (needed
        #   for GitVersion)
        run: |
          git clone https://github.com/ajgorhoe/IGLib.modules.IGLibCore `
            IGLibCore

      # CLONE IGLibScripts
      - name: Clone IGLibScripts
        shell: pwsh
        # Important: set --depth 0 to avoid shallow clones (needed
        #   for GitVersion)
        run: |
          git clone https://github.com/ajgorhoe/IGLib.modules.IGLibScripts `
            IGLibScripts

      # # CHECKOUT IGLibScripting
      # - name: Clone IGLibScripting
        # uses: actions/checkout@v4
        # with:
          # repository: ajgorhoe/IGLib.modules.IGLibScripting
          # path: IGLibScripting
          # ref: main
          # # Use automatically generated token (private repo, same owner)
          # token: ${{ secrets.PAT_ACTIONS_IGLIB_READONLY }}

      # # CLONE IGLibScripting 
      # - name: Clone IGLibScripting Dependency
        # shell: pwsh
        # # Important: set --depth 0 to avoid shallow clones (needed
        # #   for GitVersion)
        # run: |
          # git clone https://${{ secrets.PAT_ACTIONS_IGLIB_READONLY }}@github.com/ajgorhoe/IGLib.modules.IGLibScripting `
            # IGLibScripting1

      # # SET UP .NET SDK 8.0
      # - name: Setup .NET 8
      #   uses: actions/setup-dotnet@v3
      #   with:
      #     dotnet-version: 8.0.x

      # # SET UP .NET SDK 6.0
      # - name: Setup .NET 6
      #   uses: actions/setup-dotnet@v3
      #   with:
      #     dotnet-version: 6.0.x

      - name: SET UP .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      # INSTALL global DOTNET TOOLS
      - name: INSTALL global DOTNET TOOLS
        run: |
          dotnet tool install --global GitVersion.Tool

      - name: Setup MSBuild for .NET Framework
        uses: microsoft/setup-msbuild@v1  # Needed for .NET Framework builds

      # RUN PRE-BUILD SCRIPT (PowerShell)
      - name: Run Pre-Build PowerShell Script
        run: pwsh -File ${{ env.REPODIR }}/scripts/PrintEnv.ps1

      # CHECK .NET SDK version and global tools:
      - name: Check .NET SDK and global tools
        shell: pwsh
        run: |
          Write-Host "Checking .NET SDK version..."
          dotnet --version
          Write-Host "Listing global dotnet tools..."
          dotnet tool list --global
          Write-Host "Repo VERSION via GitVersion..."
          cd ${{ env.REPODIR }}
          dotnet gitversion /showvariable FullSemVer

      # RESTORE DEPENDENCIES
      - name: Restore NuGet packages
        run: dotnet restore ${{ env.REPODIR }}/${{ env.REPODIR }}.sln

      # BUILD Main Project & Test Project in Release Mode
      - name: Build Solution
        run: dotnet build ${{ env.REPODIR }}/${{ env.REPODIR }}.sln --configuration Release --no-restore

      # RUN TESTS & COLLECT RESULTS
      - name: Run Unit Tests
        shell: pwsh
        continue-on-error: ${{ env.IGNORE_TEST_ERRORS }}
        # Remark: we use the solution instead of projects.
        run: dotnet test ${{ env.REPODIR }}/${{ env.REPODIR }}.sln --configuration Release --logger trx --results-directory test-results
        # run: dotnet test ${{ env.REPODIR }}/test/IGLib.Core.Tests/IGLib.Core.Tests.csproj --configuration Release --logger trx --results-directory test-results

      # UPLOAD BUILD OUTPUT (DLLs, EXEs, etc.)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts
          path: ${{ env.REPODIR }}/src/IGLib.Core/bin/Release/

      # RUN a TEST SCRIPT (PowerShell)
      - name: Run Post-Build PowerShell Script
        run: pwsh -File ${{ env.REPODIR }}/scripts/PrintEnv.ps1

