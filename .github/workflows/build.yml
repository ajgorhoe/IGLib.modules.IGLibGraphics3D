name: Build and Test MainRepo1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering
  
env:
  # Main repository directory:
  # Placeholder: ${{ env.REPO_DIR }}
  REPO_DIR: IGLibGraphics3D
  # Main source project directory:
  # Placeholder: ${{ env.SOURCE_DIR }}
  SOURCE_DIR: IGLibGraphics3D/src/IGLib.Graphics3D/
  # Whether failed tests are ignored (should normally be false):
  # Placeholder: ${{ env.IGNORE_TEST_ERRORS }}
  IGNORE_TEST_ERRORS: true

jobs:

  build-and-test:
    runs-on: windows-latest  # use Windows for .NET Framework support
    # runs-on: ubuntu-latest # runs on GitHub-hosted Ubuntu
    strategy:
      matrix:
        dotnet-version: [ '10.0' ]

    steps:
      
      # CHECKOUT Main Repository
      - name: Clone Main Repository
        uses: actions/checkout@v4
        with:
          repository: ajgorhoe/IGLib.modules.${{ env.REPO_DIR }}
          path: ${{ env.REPO_DIR }}
          ref: main
          # Important: set fetch-depth 0 to avoid shallow clones (needed
          #   for GitVersion):
          fetch-depth: 0
          # Temporary token created automatically for the main repo (owner of the workflow) 
          token: ${{ secrets.GITHUB_TOKEN  }}

      # CLONE DEPENDENCY repositories:
      - name: CLONE DEPENDENCY repos
        shell: pwsh
        # Important: set --depth 0 to avoid shallow clones (needed
        #   for GitVersion)
        run: |
          echo "Cloning dependencies via repo's own script (UpdateDepencencyReposExtended.ps1)`n`n..."
          ./${{ env.REPO_DIR }}/scripts/UpdateDepencencyReposExtended.ps1

      - name: SET UP .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      
      # INSTALL global DOTNET TOOLS
      - name: INSTALL global DOTNET TOOLS
        run: |
          dotnet tool install --global GitVersion.Tool

      - name: Setup MSBuild for .NET Framework
        uses: microsoft/setup-msbuild@v1  # Needed for .NET Framework builds

      # RUN PRE-BUILD SCRIPT (PowerShell)
      - name: Run Pre-Build PowerShell Script
        run: pwsh -File ${{ env.REPO_DIR }}/scripts/PrintEnv.ps1

      # CHECK .NET SDK version and global tools:
      - name: Check .NET SDK and global tools
        shell: pwsh
        run: |
          Write-Host "Checking .NET SDK version..."
          dotnet --version
          Write-Host "Listing global dotnet tools..."
          dotnet tool list --global
          Write-Host "Repo VERSION via GitVersion..."
          cd ${{ env.REPO_DIR }}
          dotnet gitversion /showvariable FullSemVer

      # RESTORE DEPENDENCIES
      - name: Restore NuGet packages
        run: dotnet restore ${{ env.REPO_DIR }}/${{ env.REPO_DIR }}.sln

      # BUILD Main Project & Test Project in Release Mode
      - name: Build Solution
        run: dotnet build ${{ env.REPO_DIR }}/${{ env.REPO_DIR }}.sln --configuration Release --no-restore

      # RUN TESTS & COLLECT RESULTS
      - name: Run Tests
        id: teststep
        # shell: pwsh
        # Remark: we use the solution instead of projects.
        run: dotnet test ${{ env.REPO_DIR }}/${{ env.REPO_DIR }}.sln --configuration Release --logger trx --results-directory TestResults
        continue-on-error: true
        # ${{ env.IGNORE_TEST_ERRORS }}

      - name: Upload test results
        if: always()   # runs even if previous step failed
        uses: actions/upload-artifact@v4
        with:
          # Name of the uploaded artifact (arbitrary):
          name: TestResults
          # Path (relative to the workspace) of the file(s) or folder(s) to 
          # upload as artifact:
          path: ./TestResults

      # Report tests failure
      - name: Report tests failure
        if: steps.teststep.outcome == 'failure'
        run: echo "⚠️ Some tests failed, but the pipeline will continue."

      # UPLOAD BUILD OUTPUT (DLLs, EXEs, etc.)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts
          path: ${{ env.SOURCE_DIR }}/bin/Release/

      # RUN a TEST SCRIPT (PowerShell)
      - name: Run Post-Build PowerShell Script
        run: pwsh -File ${{ env.REPO_DIR }}/scripts/PrintEnv.ps1

